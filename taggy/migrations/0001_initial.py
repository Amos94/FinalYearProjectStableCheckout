# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-02 12:05
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotators',
            fields=[
                ('annotatorId', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=25)),
                ('password', models.CharField(max_length=32)),
                ('usertype', models.CharField(max_length=15)),
            ],
            options={
                'verbose_name_plural': 'Annotators',
            },
        ),
        migrations.CreateModel(
            name='Annotators_sets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setId', models.IntegerField()),
                ('annotatorId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Annotators sets',
            },
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('categoryId', models.AutoField(primary_key=True, serialize=False)),
                ('catName', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Check_posts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postId', models.IntegerField()),
                ('forumId', models.IntegerField()),
                ('topicId', models.IntegerField()),
                ('creationDate', models.DateTimeField()),
                ('profileId', models.IntegerField()),
                ('authorName', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Check posts',
            },
        ),
        migrations.CreateModel(
            name='Emoticons',
            fields=[
                ('emoticonId', models.AutoField(primary_key=True, serialize=False)),
                ('canonicalForm', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Emoticons',
            },
        ),
        migrations.CreateModel(
            name='Emoticons_tag',
            fields=[
                ('tagId', models.AutoField(primary_key=True, serialize=False)),
                ('emoticonId', models.IntegerField()),
                ('rawTag', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Emoticons tag',
            },
        ),
        migrations.CreateModel(
            name='Forums',
            fields=[
                ('forumId', models.IntegerField(primary_key=True, serialize=False)),
                ('forumName', models.CharField(max_length=100)),
                ('forumDescription', models.CharField(max_length=250)),
                ('categoryId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Forums',
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('postId', models.AutoField(primary_key=True, serialize=False)),
                ('forumId', models.IntegerField()),
                ('topicId', models.IntegerField()),
                ('creationDate', models.DateTimeField()),
                ('profileId', models.IntegerField()),
                ('content', models.TextField()),
                ('postState', models.TextField(default='INITIAL')),
                ('dateReviewed', models.DateTimeField()),
                ('dateParsed', models.DateTimeField()),
                ('parseVersion', models.IntegerField(default=0)),
                ('parseTool', models.TextField()),
                ('parseHistory', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Posts',
            },
        ),
        migrations.CreateModel(
            name='Posts_annotators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotatorId', models.IntegerField()),
                ('postId', models.IntegerField()),
                ('numSentencesInPost', models.IntegerField()),
                ('comment', models.TextField()),
                ('numSentencesTagged', models.IntegerField()),
                ('lastUpdated', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'Posts annotators',
            },
        ),
        migrations.CreateModel(
            name='Posts_emoticons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postId', models.IntegerField()),
                ('emoticonId', models.IntegerField()),
                ('tagId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Post emoticons',
            },
        ),
        migrations.CreateModel(
            name='Posts_sets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setId', models.IntegerField()),
                ('postId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Posts sets',
            },
        ),
        migrations.CreateModel(
            name='Profiles',
            fields=[
                ('profileId', models.IntegerField(primary_key=True, serialize=False)),
                ('userName', models.CharField(max_length=50)),
                ('memberSince', models.DateField()),
                ('lastLogin', models.DateField()),
                ('location', models.CharField(max_length=100)),
                ('dob', models.DateField()),
                ('occupation', models.CharField(max_length=150)),
                ('biography', models.TextField()),
                ('diagnosis', models.CharField(max_length=100)),
                ('diagnosed', models.DateField()),
                ('recurrent', models.CharField(max_length=150)),
                ('metastatic', models.CharField(max_length=10)),
                ('stage', models.CharField(max_length=10)),
                ('lymph', models.CharField(max_length=10)),
                ('posLymphNodes', models.CharField(max_length=10)),
                ('tumorSize', models.CharField(max_length=20)),
                ('tumorGrade', models.CharField(max_length=30)),
                ('hormoneReceptor', models.CharField(max_length=100)),
                ('herStatus', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='Sentences',
            fields=[
                ('sentenceId', models.AutoField(primary_key=True, serialize=False)),
                ('postId', models.IntegerField()),
                ('sentence', models.TextField()),
                ('paragraphInPost', models.IntegerField()),
                ('sentenceInParagraph', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Sentences',
            },
        ),
        migrations.CreateModel(
            name='Sentences_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentenceId', models.IntegerField()),
                ('tagId', models.IntegerField()),
                ('postId', models.IntegerField()),
                ('annotatorId', models.IntegerField()),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'verbose_name_plural': 'Sentences tags',
            },
        ),
        migrations.CreateModel(
            name='Sets',
            fields=[
                ('setId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
                ('description', models.TextField()),
                ('creatordId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Sets',
            },
        ),
        migrations.CreateModel(
            name='Signatures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postId', models.IntegerField()),
                ('profileId', models.IntegerField()),
                ('signatures', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Signatures',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('tagId', models.AutoField(primary_key=True, serialize=False)),
                ('tagName', models.CharField(max_length=4)),
                ('tagDescription', models.CharField(max_length=250)),
                ('provideOrRequest', models.CharField(max_length=1)),
            ],
            options={
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Topics',
            fields=[
                ('topicId', models.IntegerField(primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=25)),
                ('title', models.CharField(max_length=150)),
                ('creationDate', models.DateTimeField()),
                ('profileId', models.IntegerField()),
                ('lastDate', models.DateTimeField()),
                ('numViews', models.IntegerField()),
                ('forumId', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Topics',
            },
        ),
    ]
